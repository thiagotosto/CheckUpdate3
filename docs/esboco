Desenhar Rack

estratégia: desenhar rack vazio, checar no banco e pintar locais ocupados.


Pseudo-código:

    constantes globais:
    - posição inicial do rack em x e y.
    - unidade de altura do slot.

    (1)
    *. consulta no banco o servidores do rack.
    *. desenha rack em branco.
    *. para cada servidor:
        *. desenha o servidor no rack.
        *. coloca informações no servidor.

    (2)

    - consulta no banco os servidores do rack: 
        parametros: numero do rack.
        retorno: lista de objetos(servidores) do banco.
         
        *. faz query com o número do rack.
        *. retorna.

    - desenha rack em branco: trivial.

    - desenha o servidor no rack:
        parametros: objeto(servidor).
        retorno: ---
        
        *. decide cor do servidor com base no fabricante.ł
        *. fill com altura e largura do slot(constantes) e posição.

        obs.: A posição dele será calculada com a posição inicial mais a unidade de slot vezes a posição do servidor.

    - coloca informações no servidor:


        *. define tamanho da fonte.
        *. calcula meio do servidor.
        *. fill text na posição calculada.
                
        
         
        
    

Esboço:

JS

var xinitial = 50;
var yinitial = 50;
var slotAmount = 40;
var slotHeigth = 20;
var slotWidth = 120;
var sideWidth = 20;

function drawBases() {
  drawRack(22);
  drawLegend();
  
} 
 
function drawLegend() {
   var canvas = document.getElementById("canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
      }

   var xLegendInitial = xinitial + slotWidth + sideWidth + 20;
   var yLegendInitial = yinitial + slotAmount*slotHeigth - 10;
  
   //desenhando indicativos
   roundedRect(ctx,xLegendInitial,yinitial + slotAmount*slotHeigth - 10,10,10,2,'#222', '#EEE9E9');
   roundedRect(ctx,xLegendInitial + 70,yinitial + slotAmount*slotHeigth - 10,10,10,2,'#222', '#0096d6');
   
   //escrevendo legendas
   ctx.font = "13px Helvetica";
   ctx.fillStyle = "#222";
   ctx.fillText("DELL", xLegendInitial + 20, yLegendInitial + 10);
   ctx.fillText("HP", xLegendInitial + 90, yLegendInitial + 10);
}


function drawRack(rackNumber) {
   var canvas = document.getElementById("canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
      }
     
    

    //setando cor do rack
    ctx.strokeStyle = '#222';
    ctx.fillStyle = '#222';
  
    //desenhando topo
    var xTopInitial = xinitial - sideWidth;
    var yTopInitial = yinitial - slotHeigth;
   
    ctx.strokeRect(xTopInitial, yTopInitial, slotWidth + 2*sideWidth, slotHeigth);
    ctx.fillRect(xTopInitial, yTopInitial, slotWidth + 2*sideWidth, slotHeigth);
  
    //desenhando laterais
    ctx.strokeRect(xinitial - sideWidth,yinitial, sideWidth, slotHeigth*slotAmount);
    ctx.strokeRect(xinitial + slotWidth,yinitial, sideWidth, slotHeigth*slotAmount);
    ctx.fillRect(xinitial - sideWidth,yinitial, sideWidth, slotHeigth*slotAmount);
    ctx.fillRect(xinitial + slotWidth,yinitial, sideWidth, slotHeigth*slotAmount);
  
    //desenhando esqueleto do rack
    for (i=0; i<slotAmount; i++) {
      ctx.strokeRect(xinitial, yinitial + slotHeigth*i, slotWidth, slotHeigth);
 
    }
    
    //numeração
    ctx.fillStyle = 'white';
    for (i=0; i<slotAmount; i++) {
      ctx.fillText(i+1, xinitial - 12, yinitial + slotHeigth*(i+1) - 3);
    }
    //numero do rack
    ctx.font = 'bold 14px Helvetica'
    ctx.fillText(rackNumber, xTopInitial + sideWidth + slotWidth/2 - 6, yTopInitial + slotHeigth - 4);
} 
 



function drawServer(server) {
   
   var canvas = document.getElementById("canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
      }
     
  
  //definindo cor pelo fabricante
   if (server.fabricante == 'DELL') {     
     ctx.fillStyle ='#EEE9E9';
   } else if (server.fabricante == 'HP'){
     ctx.fillStyle = '#0096d6';
   }

  ctx.fillRect(xinitial, yinitial + (server.posicao-1)*slotHeigth, slotWidth, slotHeigth);
  ctx.fillRect(50, 50*30, slotWidth, slotHeigth); 
  
  
  
  //colcocando informação  
  putInfo(server);
  
   //indicador de ligado ou desligado
  if (server.em_uso == 'S') {
    ctx.fillStyle = 'LimeGreen';
    ctx.strokeStyle = 'LimeGreen';
  } else if(server.em_uso == 'N') {
    ctx.fillStyle = 'red';
    ctx.strokeStyle = 'red';
  }
   
  
  ctx.beginPath();
  ctx.arc(xinitial + slotWidth - 4, yinitial + (server.posicao-1)*slotHeigth + 4, 2, 0, Math.PI*2);
  ctx.stroke();
  ctx.fill();
  
}  

function putInfo(server) {
  var canvas = document.getElementById("canvas");
  
  if (canvas.getContext) {
    var ctx = canvas.getContext("2d"); 
  }
  
  ctx.font = '13px Helvetica';
  
  //console.log(server.serial);
  //console.log(xinitial);
  //console.log(yinitial);
  //console.log(server.posicao);
  
  var xaddition = slotWidth/2 - server.serial.length/2*8;
  ctx.fillStyle = '#222';
  ctx.fillText(server.serial, xinitial + xaddition, yinitial + (server.posicao-1)*slotHeigth + slotHeigth/2 + 12/2);
  
  
  
}

function roundedRect(ctx,x,y,width,height,radius,strokeColor,fillColor){
  ctx.beginPath();
  ctx.moveTo(x,y+radius);
  ctx.lineTo(x,y+height-radius);
  ctx.quadraticCurveTo(x,y+height,x+radius,y+height);
  ctx.lineTo(x+width-radius,y+height);
  ctx.quadraticCurveTo(x+width,y+height,x+width,y+height-radius);
  ctx.lineTo(x+width,y+radius);
  ctx.quadraticCurveTo(x+width,y,x+width-radius,y);
  ctx.lineTo(x+radius,y);
  ctx.quadraticCurveTo(x,y,x,y+radius);
  ctx.strokeStyle = strokeColor;
  ctx.stroke();
  ctx.fillStyle = fillColor;
  ctx.fill();
}



HTML

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
</head>
<body onload="drawBases();">
  <canvas height='856' width='400' id='canvas'></canvas>
  <br>
  <button id="buttonHP" onclick="drawServer({serial:'BRC2100TMT', fabricante:'HP', posicao:20, em_uso: 'S'});">Pinta HP</button>
  <button onclick="drawServer({serial:'G0BNSV1', fabricante:'DELL', posicao:7, em_uso: 'N'});">Pinta DELL</button>

</body>
</html>



CSS

button {
  border-radius: 3px;
  border: solid 1px #999;
  background: linear-gradient(white, #ddd);;
}

button:active {
  background: linear-gradient(#ddd, white);
  outline: none;
}

button:focus {
  outline: none;
}

#buttonHP {
  margin-left: 30px;
}
